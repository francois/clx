#!/bin/bash

# Maintient et sélectionne une base de données d'exercises et leurs différentes exécutions
# Copyright (C) 2018 François Beausoleil (francois@teksol.info)

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

DBFILE="${HOME}/.clx.db"

main() {
  if [[ ! -f "${DBFILE}" ]]
  then
    instantiate_schema
  fi

  case "${1}" in
    new)
      create_new
      ;;

    add)
      shift
      add "${@}"
      ;;

    drop)
      shift
      drop
      ;;

    -h|--help|help)
      show_help
      ;;

    *)
      select_and_run_exercise
      ;;
  esac
}

show_help() {
  echo >&2 "Utilisation: clx [--help|-h|help|add|new] [NAME] [REP1] [REP2] [REPn]"
  echo >&2
  echo >&2 "Maintient our sélectionne un exercise à exécuter."
  echo >&2
  echo >&2 "  new: écrase tout base de donnée existante et la remplace par une version vide"
  echo >&2
  echo >&2 "  add: ajoute cet exercise dans la liste des exercises potentiels"
  echo >&2 "       clx add \"Squats\" 2x10 2x12 3x10 3x15"
  echo >&2 "       clx add \"Push ups\" 2x11 2x13 3x11 3x17"
  echo >&2
  echo >&2 "Quand clx est appelé sans argument, il choisit le prochain exercise du niveau actuel"
  echo >&2 "Tous les exercises de niveau 1 doivent être exécutés avant de passer au niveau 2:"
  echo >&2 "chaque niveau est exécuté en bloc avant de passer au niveau suivant."
  echo >&2 "Si nous suivons l'exemple ci-haut, clx choisira au hasard 2x10 squats OU 2x11 push ups,"
  echo >&2 "ensuite, il choisira l'exercise qui n'a pas été sélectionné, puis il passera au niveau"
  echo >&2 "2, soit 2x12 squats ou 2x13 push ups, et ainsi de suite."
  echo >&2
  echo >&2 "Distribué sous la license GPL v2. Lisez le code source pour les détails."
}

create_new() {
  echo >&2 "Création d'une nouvelle version de la base de donnée CLX"
  rm "${DBFILE}"
  instantiate_schema
}

add() {
  echo >&2 "Ajout de l'exercise: ${1}"
  local exercise=$( echo "${1}" | sed "s/'/''/" ) # Apply basic SQL quoting
  shift
  sqlite3 "${DBFILE}" "INSERT INTO exercises(exercise) VALUES ('${exercise}')"
  local level=1
  while [[ ! -z "${1}" ]]
  do
    sqlite3 "${DBFILE}" "INSERT INTO repetitions(exercise, level, reps) VALUES ('${exercise}', ${level}, '$( echo "${1}" | sed "s/'/''/" )')"
    level=$(( level + 1 ))
    shift
  done
}

drop() {
  echo >&2 "Retrait de la dernière exécution:"
  sqlite3 "${DBFILE}" "SELECT * FROM executions WHERE executed_at = (SELECT max(executed_at) FROM executions)"
  sqlite3 "${DBFILE}" "DELETE FROM executions WHERE executed_at = (SELECT max(executed_at) FROM executions)"
}

select_and_run_exercise() {
  sqlite3 "${DBFILE}" <<EOSQL
WITH available_exercises(exercise, level) AS (
    SELECT exercise, min(level) -- 3. find the next levels of each exercise
    FROM (
        SELECT exercise, level -- 1. find all exercises
        FROM repetitions
        EXCEPT
        SELECT exercise, level -- 2. remove the ones we've already completed
        FROM executions) t0
    WHERE exercise NOT IN (    -- 3. remove the last exercise, regardless of level (don't repeat an exercise in two levels back-to-back)
      SELECT exercise
      FROM executions
      ORDER BY executed_at DESC
      LIMIT 1)
    GROUP BY exercise)

, next_level(level) AS (
    SELECT min(level)
    FROM available_exercises)

INSERT INTO executions(exercise, level, executed_at)
SELECT exercise, level, datetime('now')
FROM available_exercises
JOIN next_level USING (level)
ORDER BY random()
LIMIT 1
EOSQL

  sqlite3 "${DBFILE}" <<EOSQL
.mode column
.width 20 5 6 10

SELECT exercise, level, strftime('%H:%M', executed_at, 'localtime'), reps
FROM executions
JOIN repetitions USING (exercise, level)
ORDER BY executed_at DESC
LIMIT 1
EOSQL
}

instantiate_schema() {
  sqlite3 "${DBFILE}" <<EOSQL
    BEGIN;

      CREATE TABLE IF NOT EXISTS exercises(
          exercise text not null primary key check(length(exercise) > 0)
      );

      CREATE TABLE IF NOT EXISTS repetitions(
          exercise text not null references exercises
        , level int not null check(level >= 0)
        , reps text not null
        , primary key(exercise, level)
      );

      CREATE TABLE IF NOT EXISTS executions(
          exercise text not null
        , level int not null
        , executed_at timestamptz not null
        , primary key(exercise, level)
        , foreign key(exercise, level) references repetitions
      );

    COMMIT;
EOSQL
}

main "${@}"
